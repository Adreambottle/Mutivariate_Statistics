load[, 1])
load[, 1]
load[order(load[, 1]), 1]
order(load[, 1])
load            <- my.prc$rotation
sorted.loadings <- load[order(load[, 1]), 1]      # `order` returns the order of the vector
myTitle         <- "Loadings Plot for PC1"
myXlab          <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
sorted.loadings <- load[order(load[, 2]), 2]
myTitle <- "Loadings Plot for PC2"
myXlab  <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
# Now draw the BiPlot
biplot(my.prc, cex=c(1, 0.7))
source('~/Desktop/STA4002_Tutorial4.R')
library(lattice)
path <- "/Users/meron/Desktop/MTB/Tutorial/04/wine.csv"
my.wines <- read.csv(path, header=TRUE)
my.wines
my.wines.data = my.wines[,-1]
summary(my.wines.data)
# Look at the correlations
data.cov = cov(my.wines.data)
data.cor = cor(my.wines.data, method="pearson")
data.cov
data.cor
data.cor
my.abs     <- abs(cor(my.wines.data))              # absolute value of the wine data
my.colors  <- dmat.color(my.abs)                   # Colors a symmetric matrix  改变颜色
my.ordered <- order.single(cor(my.wines.data))     # Orders objects using hierarchical clustering
cpairs(my.wines.data, my.ordered, panel.colors=my.colors, gap=0.5)
library(gclus)
my.abs     <- abs(cor(my.wines.data))              # absolute value of the wine data
my.colors  <- dmat.color(my.abs)                   # Colors a symmetric matrix  改变颜色
my.ordered <- order.single(cor(my.wines.data))     # Orders objects using hierarchical clustering
cpairs(my.wines.data, my.ordered, panel.colors=my.colors, gap=0.5)
my.wines.data
# Calculating eigenvalue
eigen(data.cov)
eigen(data.cor)
eigen(data.cor)
lambdas = eigen(data.cor)$values                   # eigenvalues of the origin data
Alpha = eigen(data.cor)$vectors                    # eigenvactors of the origin data
cumulative.lambda = cumsum(lambdas)                # cumulative sum of the eigenvalues
cumulative.lambda
lambdas/sum(diag(data.cor))                        # proportion of each PC/eigenvalue
cumulative.lambda/sum(diag(data.cor))              # cumulative sum of the proportion
my.prc <- prcomp(my.wines.data, center=TRUE, scale=TRUE)   # PCA function
screeplot(my.prc, main="Scree Plot", xlab="Components")
screeplot(my.prc, main="Scree Plot", type="line" )
screeplot(my.prc, main="Scree Plot", xlab="Components")
screeplot(my.prc, main="Scree Plot", type="line" )
load            <- my.prc$rotation                # `load` returns the rotations/PCs
sorted.loadings <- load[order(load[, 1]), 1]      # `order` returns the order of the vector
myTitle         <- "Loadings Plot for PC1"
myXlab          <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
sorted.loadings <- load[order(load[, 2]), 2]
myTitle <- "Loadings Plot for PC2"
myXlab  <- "Variable Loadings"
dotplot(sorted.loadings, main=myTitle, xlab=myXlab, cex=1.5, col="red")
# Reform the data
PC1 = my.prc$rotation[, 1]
PC2 = my.prc$rotation[, 2]
PC1
PC2
data1 = as.matrix(my.wines.data) %*% as.matrix(PC1)
data2 = as.matrix(my.wines.data) %*% as.matrix(PC2)
plot(data1, data2, cex=1.5, col='red', pch=16)
# Now draw the BiPlot
biplot(my.prc, cex=c(1, 0.7))
# Apply the Varimax Rotation
my.var <- varimax(my.prc$rotation)
headsize <- read.csv("/Users/meron/Desktop/Table1.csv")
headsize
headsize[:, 2:5]
headsize[, 2:5]
headsize.std = sweep(headsize, 2, + apply(headsize, 2, sd), FUN = "/")
headsize.std
headsize = headsize[, 2:5]
headsize.std = sweep(headsize, 2, + apply(headsize, 2, sd), FUN = "/")
headsize.std
apply(headsize, 2, sd)
headsize
apply(headsize, 2, sd)
headsize.std = sweep(headsize, 2, apply(headsize, 2, sd), FUN = "/")
headsize.std
headsize.std = sweep(headsize, 2, -apply(headsize, 2, sd), FUN = "/")
headsize.std
headsize[, 1].mean()
mean(headsize[, 1])
get_sd = fun(X){
X.std =  stderr(X)
return X / X.std
}
get_sd = fun(X){
X.std =  stderr(X)
return(X / X.std)
}
get_sd = fun(X){
X.std =  stderr(X)
return(X / X.std)
}
get_sd = function(X){
X.std =  stderr(X)
return(X / X.std)
}
headsize.sd = apply(headsize, 2, get_sd)
headsize.sd = sapply(headsize, 2, get_sd)
apply(headsize, 2, get_sd)
get_sd(headsize[, 1])
X = headsize[, 1]
X.std =  stderr(X)
stderr(X)
get_sd = function(X){
X = headsize[, 1]
# X.std =  sd(X)
return(X / X.std)
}
get_sd(headsize[, 1])
get_sd = function(X){
# X = headsize[, 1]
X.std =  sd(X)
return(X / X.std)
}
get_sd(headsize[, 1])
headsize.sd = apply(headsize, 2, get_sd)
headsize.sd
R = cor(headsize.std)
R
r11 = R[1:2, 1:2]
r22 = R[-(1:2), -(1:2)]
r12 = R[1:2, -(1:2)]
r21 = R[-(1:2), 1:2]
r11
r22
r12
(E1 = solve(r11) %*% r12 %*% solve(r22) %*%r21)
(E2 = solve(r22) %*% r21 %*% solve(r11) %*%r12)
(e1 = eigen(E1))
(e2 = eigen(E2))
girth1 = headsize.std[,1:2] %*% e1$vectors[,1]
headsize.std = apply(headsize, 2, get_sd)
# headsize.std = sweep(headsize, 2, apply(headsize, 2, sd), FUN = "/")
R = cor(headsize.std)
r11 = R[1:2, 1:2]
r22 = R[-(1:2), -(1:2)]
r12 = R[1:2, -(1:2)]
r21 = R[-(1:2), 1:2]
(E1 = solve(r11) %*% r12 %*% solve(r22) %*%r21)
(E2 = solve(r22) %*% r21 %*% solve(r11) %*%r12)
(e1 = eigen(E1))
(e2 = eigen(E2))
girth1 = headsize.std[,1:2] %*% e1$vectors[,1]
girth2 = headsize.std[,3:4] %*% e2$vectors[,1]
girth1
girth2
girth1 = headsize.std[,1:2] %*% e1$vectors[,1]
girth2 = headsize.std[,3:4] %*% e2$vectors[,1]
shape1 = headsize.std[,1:2] %*% e1$vectors[,2]
shape2 = headsize.std[,3:4] %*% e2$vectors[,2]
(g = cor(girth1, girth2))
(s = cor(shape1, shape2))
plot(girth1, girth2)
plot(shape1, shape2)
r11 = LAdepr[1:2, 1:2]
r22 = LAdepr[-(1:2), -(1:2)]
r12 = LAdepr[1:2, -(1:2)]
r21 = LAdepr[-(1:2), 1:2]
(E1 = solve(r11) %*% r12 %*% solve(r22) %*%r21)
"
The data in Table 3.1 give the head lengths and head breadths (in millimetres)
for each of the ﬁrst two adult sons in 25 families. Here we shall use only the
head lengths; the head breadths will be used later in the chapter.
"
headsize = read.csv("/Users/meron/Desktop/Table1.csv")
headsize = headsize[, 2:5]
headsize
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.sd
plot(headsize.std[1, ], headsize.std[2, ])
headsize.std
plot(headsize.std[, 1], headsize.std[, 2])
plot(headsize.std[, 1], headsize.std[, 2], col='red')
scatter(headsize.std[, 3], headsize.std[, 4], col='blue')
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std
plot(headsize.std[, 1], headsize.std[, 2], col='red')
points(headsize.std[, 3], headsize.std[, 4], col='blue')
min(headsize.std)
floor(min(headsize.std))
floor(min(headsize.std))
ceiling(max(headsize.std))
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std
xlim = c(floor(min(headsize.std)), ceiling(max(headsize.std)))
plot(headsize.std[, 1], headsize.std[, 2], col='red', xlim=xlim)
points(headsize.std[, 3], headsize.std[, 4], col='blue')
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std
lim = c(floor(min(headsize.std)), ceiling(max(headsize.std)))
plot(headsize.std[, 1], headsize.std[, 2], col='red', xlim=xlim, ylim=lim)
points(headsize.std[, 3], headsize.std[, 4], col='blue')
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std
lim = c(floor(min(headsize.std)), ceiling(max(headsize.std)))
plot(headsize.std[, 1], headsize.std[, 2], col='red', xlim=lim, ylim=lim)
points(headsize.std[, 3], headsize.std[, 4], col='blue')
headsize.std[c(1, 3)]
headsize.std
headsize.std[c(1, 3), ]
min(headsize.std[1, c(1, 3)]
headsize.std[1, c(1, 3)]
headsize.std[, c(1, 3)]
xlim = c(floor(min(headsize.std[, c(1, 3)])), ceiling(min(headsize.std[, c(1, 3)])))
ylim = c(floor(min(headsize.std[, c(2, 4)])), ceiling(min(headsize.std[, c(2, 4)])))
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std
xlim = c(floor(min(headsize.std[, c(1, 3)])), ceiling(min(headsize.std[, c(1, 3)])))
ylim = c(floor(min(headsize.std[, c(2, 4)])), ceiling(min(headsize.std[, c(2, 4)])))
plot(headsize.std[, 1], headsize.std[, 2], col='red', xlim=xlim, ylim=ylim)
points(headsize.std[, 3], headsize.std[, 4], col='blue')
xlim
headsize.std[, c(1, 3)]
min(headsize.std[, c(1, 3)])
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std
xlim = c(floor(min(headsize.std[, c(1, 3)])), ceiling(max(headsize.std[, c(1, 3)])))
ylim = c(floor(min(headsize.std[, c(2, 4)])), ceiling(max(headsize.std[, c(2, 4)])))
plot(headsize.std[, 1], headsize.std[, 2], col='red', xlim=xlim, ylim=ylim)
points(headsize.std[, 3], headsize.std[, 4], col='blue')
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std
xlim = c(floor(min(headsize.std[, c(1, 3)])), ceiling(max(headsize.std[, c(1, 3)])))
ylim = c(floor(min(headsize.std[, c(2, 4)])), ceiling(max(headsize.std[, c(2, 4)])))
plot(headsize.std[, 1], headsize.std[, 2], col='red',
xlim=xlim, ylim=ylim, xlab="head", ylab="breath")
points(headsize.std[, 3], headsize.std[, 4], col='blue')
R = cor(headsize.std)
r11 = R[1:2, 1:2]
r22 = R[-(1:2), -(1:2)]
r12 = R[1:2, -(1:2)]
r21 = R[-(1:2), 1:2]
R
(E1 = solve(r11) %*% r12 %*% solve(r22) %*%r21)
(E2 = solve(r22) %*% r21 %*% solve(r11) %*%r12)
(e1 = eigen(E1))
(e2 = eigen(E2))
(e1 = eigen(E1))
(e2 = eigen(E2))
(e1 = eigen(E1))
(e2 = eigen(E2))
round(e1$vectors)
round(e1$vectors)
(e1 = eigen(E1))
(e2 = eigen(E2))
round(e1$vectors, 2)
round(e2$vectors, 2)
girth1 = headsize.std[,1:2] %*% e1$vectors[,1]
girth2 = headsize.std[,3:4] %*% e2$vectors[,1]
shape1 = headsize.std[,1:2] %*% e1$vectors[,2]
shape2 = headsize.std[,3:4] %*% e2$vectors[,2]
g = cor(girth1, girth2)
s = cor(shape1, shape2)
plot(girth1, girth2)
plot(shape1, shape2)
g = cor(girth1, girth2)
s = cor(shape1, shape2)
g = cor(girth1, girth2)
s = cor(shape1, shape2)
g
s
headsize = read.csv("/Users/meron/Desktop/Table1.csv")
headsize = read.csv("/Users/meron/Desktop/Table1.csv")
headsize = headsize[, 2:5]
headsize
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std
xlim = c(floor(min(headsize.std[, c(1, 3)])), ceiling(max(headsize.std[, c(1, 3)])))
ylim = c(floor(min(headsize.std[, c(2, 4)])), ceiling(max(headsize.std[, c(2, 4)])))
plot(headsize.std[, 1], headsize.std[, 2], col='red',
xlim=xlim, ylim=ylim, xlab="head", ylab="breath")
points(headsize.std[, 3], headsize.std[, 4], col='blue')
get_sd = function(X){
# get the standard variable
X.std =  sd(X)
return(X / X.std)
}
headsize.std = apply(headsize, 2, get_sd)
headsize.std = sweep(headsize.std, 2, apply(headsize, 2, sd))
headsize.std
xlim = c(floor(min(headsize.std[, c(1, 3)])), ceiling(max(headsize.std[, c(1, 3)])))
ylim = c(floor(min(headsize.std[, c(2, 4)])), ceiling(max(headsize.std[, c(2, 4)])))
plot(headsize.std[, 1], headsize.std[, 2], col='red',
xlim=xlim, ylim=ylim, xlab="head", ylab="breath")
points(headsize.std[, 3], headsize.std[, 4], col='blue')
R = cor(headsize.std)
r11 = R[1:2, 1:2]
r22 = R[-(1:2), -(1:2)]
r12 = R[1:2, -(1:2)]
r21 = R[-(1:2), 1:2]
R
(E1 = solve(r11) %*% r12 %*% solve(r22) %*%r21)
(E2 = solve(r22) %*% r21 %*% solve(r11) %*%r12)
(e1 = eigen(E1))
(e2 = eigen(E2))
round(e1$vectors, 2)
round(e2$vectors, 2)
girth1 = headsize.std[,1:2] %*% e1$vectors[,1]
girth2 = headsize.std[,3:4] %*% e2$vectors[,1]
shape1 = headsize.std[,1:2] %*% e1$vectors[,2]
shape2 = headsize.std[,3:4] %*% e2$vectors[,2]
girth1 = headsize.std[,1:2] %*% e1$vectors[,1]
girth2 = headsize.std[,3:4] %*% e2$vectors[,1]
shape1 = headsize.std[,1:2] %*% e1$vectors[,2]
shape2 = headsize.std[,3:4] %*% e2$vectors[,2]
girth1
girth2
shape1
shape2
g = cor(girth1, girth2)
s = cor(shape1, shape2)
g
s
plot(girth1, girth2)
plot(shape1, shape2)
data = read.csv("/Users/meron/Desktop/data.csv")
data
data = read.csv("/Users/meron/Desktop/data.csv", index=TRUE)
shape(data)
size(data)
dim(data)
data = read.csv("/Users/meron/Desktop/data.csv", row.names)
data = read.csv("/Users/meron/Desktop/data.csv")
data
row.names(data)
row.names(data) = data$X
data
data = data[-1]
data
sapply(1:3, function(f) factanal(life, factors = f, method ="mle")$PVAL)
life = data[-1]
sapply(1:3, function(f) factanal(life, factors = f, method ="mle")$PVAL)
factanal(life, factors = 3, method ="mle")
(scores <- factanal(life, factors = 3, method = "mle", scores = "regression")$scores)
factanal(life, factors = 3, method ="mle")
result$loadings
result = factanal(life, factors = 3, method ="mle")
result$loadings
result$correlation
result$rotmat
sapply(1:3, function(f) factanal(life, factors = f, method ="mle")$PVAL)
sapply(1:4, function(f) factanal(life, factors = f, method ="mle")$PVAL)
result$converged
result$
result$STATISTIC
result$PVAL
data = read.csv("/Users/meron/Desktop/data.csv")
row.names(data) = data$X
life = data[-1]
life
factanal(life, factors = 3, rotation = "varimax")
data = read.csv("/Users/meron/Desktop/data.csv")
data_path = "/Users/meron/Desktop/MTB/Tutorial/09/data.csv"
data = read.csv(data_path)
row.names(data) = data$X
life = data[-1]
life
sapply(1:3, function(f) factanal(life, factors = f, method ="mle")$PVAL)
factanal(life, factors = 3, rotation = "varimax")
factanal(life, factors = 3, rotation = "promax")
result = factanal(life, factors = 3, method ="mle")
result$loadings
result$correlation
result$factors
result$rotmat
result$PVAL
data_path = "/Users/meron/Desktop/MTB/Tutorial/09/data.csv"
data = read.csv(data_path)
row.names(data) = data$X
life = data[-1]
life
sapply(1:3, function(f) factanal(life, factors = f, method ="mle")$PVAL)
factanal(life, factors = 3, rotation = "varimax")
factanal(life, factors = 3, rotation = "promax")
result = factanal(life, factors = 3)
result$loadings
result$correlation
result$rotmat
result = factanal(life, factors = 3, rotation="varimax")
result$rotmat
getwd()
getwd()
setwd("/Users/meron/Desktop/MTB/Tutorial/11")
dat <- read.csv("triathlon.csv")
head(dat)
gender <- as.factor(dat[,1])
gender
getwd()
setwd("/Users/meron/Desktop/MTB/Tutorial/11")
dat <- read.csv("triathlon.csv")
head(dat)
gender <- as.factor(dat[,1])
cat <- as.factor(dat[,2])
times <- as.matrix(dat[,3:5])
dat.summary
summary(dat)
getwd()
setwd("/Users/meron/Desktop/MTB/Tutorial/11")
dat <- read.csv("triathlon.csv")
head(dat)
getwd()
setwd("/Users/meron/Desktop/MTB/Tutorial/11")
dat <- read.csv("triathlon.csv")
head(dat)
summary(dat)
gender <- as.factor(dat[,1])
cat <- as.factor(dat[,2])
times <- as.matrix(dat[,3:5])
summary(c(gender, cat, times))
gender <- as.factor(dat[,1])
cat <- as.factor(dat[,2])
times <- as.matrix(dat[,3:5])
SWIMresCAT=lm(dat$SWIM~CATEGORY)$residuals
getwd()
setwd("/Users/meron/Desktop/MTB/Tutorial/11")
dat <- read.csv("triathlon.csv")
head(dat)
summary(dat)
gender <- as.factor(dat[,1])
cat <- as.factor(dat[,2])
times <- as.matrix(dat[,3:5])
SWIMresCAT=lm(dat$SWIM~CATEGORY)$residuals
attach dat
attach(dat)
SWIMresCAT=lm(dat$SWIM~CATEGORY)$residuals
getwd()
setwd("/Users/meron/Desktop/MTB/Tutorial/11")
dat <- read.csv("triathlon.csv")
attach(dat)
SWIMresCAT=lm(dat$SWIM~CATEGORY)$residuals
BIKEresCAT=lm(dat$BIKE~CATEGORY)$residuals
RUNresCAT=lm(dat$RUN~CATEGORY)$residuals
SWIMresGEN=lm(dat$SWIM~GENDER)$residuals
BIKEresGEN=lm(dat$BIKE~GENDER)$residuals
RUNresGEN=lm(dat$RUN~GENDER)$residuals
shapiro.test(SWIMresCAT)
shapiro.test(BIKEresCAT)
shapiro.test(RUNresCAT)
shapiro.test(SWIMresGEN)
shapiro.test(BIKEresGEN)
shapiro.test(RUNresGEN)
boxplot(lm(dat$SWIM~cat)$residuals~cat) # For CATEGORY
boxplot(lm(dat$SWIM~cat)$residuals~cat) # For GENDER
bartlett.test(SWIMresCAT~cat)
bartlett.test(BIKEresCAT~cat)
bartlett.test(RUNresCAT~cat)
getwd()
setwd("/Users/meron/Desktop/MTB/Tutorial/11")
dat <- read.csv("triathlon.csv")
attach(dat)
output <- manova(times~gender*cat)
summary.aov(output)
summary(output, test="Wilks")
summary(output, test="Pillai")
summary(output, test="Hotelling")
